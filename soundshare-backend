const express = require('express');
const multer = require('multer');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Setup SQLite
const db = new sqlite3.Database('./soundshare.db');
db.run(`CREATE TABLE IF NOT EXISTS sounds (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT,
  filename TEXT,
  tags TEXT
)`);

// Setup Multer
const storage = multer.diskStorage({
  destination: './uploads/',
  filename: (req, file, cb) => cb(null, Date.now() + '-' + file.originalname)
});
const upload = multer({ storage });

// Upload Route
app.post('/upload', upload.single('audio'), (req, res) => {
  const { title, tags } = req.body;
  const filename = req.file.filename;

  db.run(`INSERT INTO sounds (title, filename, tags) VALUES (?, ?, ?)`, [title, filename, tags], function (err) {
    if (err) return res.status(500).send(err.message);
    res.json({ success: true, id: this.lastID });
  });
});

// Get All Sounds
app.get('/sounds', (req, res) => {
  db.all('SELECT * FROM sounds ORDER BY id DESC', [], (err, rows) => {
    if (err) return res.status(500).send(err.message);
    res.json(rows);
  });
});

// Simple Search
app.get('/search', (req, res) => {
  const q = `%${req.query.q || ''}%`;
  db.all('SELECT * FROM sounds WHERE title LIKE ? OR tags LIKE ? ORDER BY id DESC', [q, q], (err, rows) => {
    if (err) return res.status(500).send(err.message);
    res.json(rows);
  });
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
